- name: Получаем список файлов swap
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      (cat /proc/swaps | grep .img || true) | awk '{print $1}'
    executable: /bin/bash

  changed_when: false
  register: isset_swapoff_images
  failed_when: isset_swapoff_images.rc > 0

- name: Отключаем swap
  when:
    - isset_swapoff_images.stdout_lines | length > 0
  block:
    - name: Отключаем swap командой
      ansible.builtin.command: swapoff -a
      changed_when: false
      register: swapoff_output
      failed_when: swapoff_output.rc > 0

    - name: Удаляем файлы swap
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ isset_swapoff_images.stdout_lines }}"

    - name: Отключаем swap в fstab
      ansible.posix.mount:
        src: '{{ item }}'
        path: none
        fstype: swap
        state: absent
      loop: "{{ isset_swapoff_images.stdout_lines }}"

- name: Установка containerd
  block:
    - name: Получаем информацию о релизах containerd
      ansible.builtin.uri:
        url: https://api.github.com/repos/containerd/containerd/releases/latest
        return_content: true
      become: false
      register: containerd_release
      delegate_to: localhost
      run_once: true

    - name: Получаем ссылку на архив containerd
      ansible.builtin.set_fact:
        containerd_url: >-
          {{
            (containerd_release.json.assets
            | selectattr('name', 'contains', '-linux-amd64.tar.gz')
            | first).browser_download_url
          }}
      become: false
      delegate_to: localhost
      run_once: true

    - name: Скачиваем архив containerd
      ansible.builtin.get_url:
        url: "{{ containerd_url }}"
        dest: /tmp/containerd-linux-amd64.tar.gz
        mode: "0600"
      become: false
      delegate_to: localhost
      run_once: true

    - name: Распаковываем архив containerd
      ansible.builtin.unarchive:
        src: "/tmp/containerd-linux-amd64.tar.gz"
        dest: /usr/local

    - name: Создать директорию /usr/local/lib/systemd/system
      ansible.builtin.file:
        path: /usr/local/lib/systemd/system
        state: directory
        recurse: true

    - name: Скачиваем службу containerd
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/containerd/containerd/main/containerd.service"
        dest: /tmp/containerd.service
        mode: "0644"
      become: false
      delegate_to: localhost
      run_once: true

    - name: Копируем службу containerd
      ansible.builtin.copy:
        src: "/tmp/containerd.service"
        dest: /usr/local/lib/systemd/system/containerd.service
        mode: "0644"

    - name: Перезапуск демона systemd
      ansible.builtin.systemd_service:
        daemon_reload: true

    - name: Установка службы containerd
      ansible.builtin.systemd_service:
        name: containerd
        state: started
        enabled: true

- name: Установка runc
  block:
    - name: Получаем информацию о релизах runc
      ansible.builtin.uri:
        url: https://api.github.com/repos/opencontainers/runc/releases/latest
        return_content: true
      register: runc_release
      become: false
      delegate_to: localhost
      run_once: true

    - name: Получаем ссылку на бинарник runc
      ansible.builtin.set_fact:
        runc_url: >-
          {{
            (runc_release.json.assets
            | selectattr('name', 'contains', 'runc.amd64')
            | first).browser_download_url
          }}
      become: false
      delegate_to: localhost
      run_once: true

    - name: Скачиваем бинарник runc
      ansible.builtin.get_url:
        url: "{{ runc_url }}"
        dest: /tmp/runc.amd64
        mode: "0600"
      become: false
      delegate_to: localhost
      run_once: true

    - name: Устанавливаем runc
      ansible.builtin.copy:
        src: "/tmp/runc.amd64"
        dest: /usr/local/sbin/runc
        mode: '0755'

- name: Установка cni
  block:
    - name: Получаем информацию о релизах cni
      ansible.builtin.uri:
        url: https://api.github.com/repos/containernetworking/plugins/releases/latest
        return_content: true
      register: cni_release
      become: false
      delegate_to: localhost
      run_once: true

    - name: Получаем ссылку на архив cni
      ansible.builtin.set_fact:
        cni_url: >-
          {{
            (cni_release.json.assets
            | selectattr('name', 'contains', 'cni-plugins-linux-amd64-')
            | first).browser_download_url
          }}
      become: false
      delegate_to: localhost
      run_once: true

    - name: Скачиваем архив cni
      ansible.builtin.get_url:
        url: "{{ cni_url }}"
        dest: /tmp/cni-plugins-linux-amd64.tar.gz
        mode: "0600"
      become: false
      delegate_to: localhost
      run_once: true

    - name: Создать директорию /opt/cni/bin
      ansible.builtin.file:
        path: /opt/cni/bin
        state: directory
        recurse: true

    - name: Распаковываем архив cni
      ansible.builtin.unarchive:
        src: "/tmp/cni-plugins-linux-amd64.tar.gz"
        dest: /opt/cni/bin

- name: Создать директорию /etc/containerd
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: "0755"

- name: Создаём config файл containerd
  ansible.builtin.shell:
    cmd: containerd config default > /etc/containerd/config.toml
    creates: /etc/containerd/config.toml
  register: containerd_output
  failed_when: containerd_output.rc > 0

- name: Включаем systemdCgroup в containerd
  ansible.builtin.blockinfile:
    path: /etc/containerd/config.toml
    block: "            SystemdCgroup = true"
    insertafter: "ShimCgroup = ''"

- name: Перезапускаем containerd
  ansible.builtin.service:
    name: containerd
    state: restarted

- name: Включаем IPv4 forwarding
  ansible.posix.sysctl:
    sysctl_file: /etc/sysctl.d/k8s.conf
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: true
    state: present
    reload: true

- name: Загружаем модуль br_netfilter
  ansible.builtin.command: modprobe br_netfilter
  register: modprobe_output
  failed_when: modprobe_output.rc > 0
  changed_when: false

- name: Создать файл для автозагрузки модуля
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: br_netfilter
    create: true
    mode: '0644'
